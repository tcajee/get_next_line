DUP(3P)                         POSIX Programmer's Manual                         DUP(3P)

PPRROOLLOOGG
       This  manual page is part of the POSIX Programmer's Manual.  The Linux implementa‐
       tion of this interface may differ (consult the corresponding Linux manual page for
       details of Linux behavior), or the interface may not be implemented on Linux.

NNAAMMEE
       dup, dup2 — duplicate an open file descriptor

SSYYNNOOPPSSIISS
       #include <unistd.h>

       int dup(int _f_i_l_d_e_s);
       int dup2(int _f_i_l_d_e_s, int _f_i_l_d_e_s_2);

DDEESSCCRRIIPPTTIIOONN
       The  _d_u_p()  function  provides an alternative interface to the service provided by
       _f_c_n_t_l() using the F_DUPFD command. The call _d_u_p(_f_i_l_d_e_s) shall be equivalent to:

           ffccnnttll((ffiillddeess,, FF__DDUUPPFFDD,, 00));;

       The _d_u_p_2() function shall cause the file descriptor _f_i_l_d_e_s_2 to refer to  the  same
       open  file  description  as the file descriptor _f_i_l_d_e_s and to share any locks, and
       shall return _f_i_l_d_e_s_2.  If _f_i_l_d_e_s_2 is already a  valid  open  file  descriptor,  it
       shall  be  closed  first,  unless  _f_i_l_d_e_s is equal to _f_i_l_d_e_s_2 in which case _d_u_p_2()
       shall return _f_i_l_d_e_s_2 without closing it. If the close  operation  fails  to  close
       _f_i_l_d_e_s_2,  _d_u_p_2()  shall  return  −1  without changing the open file description to
       which _f_i_l_d_e_s_2 refers. If _f_i_l_d_e_s is not a valid file descriptor, _d_u_p_2()  shall  re‐
       turn −1 and shall not close _f_i_l_d_e_s_2.  If _f_i_l_d_e_s_2 is less than 0 or greater than or
       equal to {OPEN_MAX}, _d_u_p_2() shall return −1 with _e_r_r_n_o set to [[EEBBAADDFF]].

       Upon successful completion, if _f_i_l_d_e_s is not equal to _f_i_l_d_e_s_2, the FD_CLOEXEC flag
       associated  with  _f_i_l_d_e_s_2  shall  be  cleared.  If _f_i_l_d_e_s is equal to _f_i_l_d_e_s_2, the
       FD_CLOEXEC flag associated with _f_i_l_d_e_s_2 shall not be changed.

       If _f_i_l_d_e_s refers to a typed memory object, the result of the  _d_u_p_2()  function  is
       unspecified.

RREETTUURRNN VVAALLUUEE
       Upon  successful  completion  a  non-negative integer, namely the file descriptor,
       shall be returned; otherwise, −1 shall be returned and _e_r_r_n_o set to  indicate  the
       error.

EERRRROORRSS
       The _d_u_p() function shall fail if:

       EEBBAADDFF  The _f_i_l_d_e_s argument is not a valid open file descriptor.

       EEMMFFIILLEE All file descriptors available to the process are currently open.

       The _d_u_p_2() function shall fail if:

       EEBBAADDFF  The  _f_i_l_d_e_s  argument  is  not a valid open file descriptor or the argument
              _f_i_l_d_e_s_2 is negative or greater than or equal to {OPEN_MAX}.

       EEIINNTTRR  The _d_u_p_2() function was interrupted by a signal.

       The _d_u_p_2() function may fail if:

       EEIIOO    An I/O error occurred while attempting to close _f_i_l_d_e_s_2.

       _T_h_e _f_o_l_l_o_w_i_n_g _s_e_c_t_i_o_n_s _a_r_e _i_n_f_o_r_m_a_t_i_v_e_.

EEXXAAMMPPLLEESS
   RReeddiirreeccttiinngg SSttaannddaarrdd OOuuttppuutt ttoo aa FFiillee SS
       The following example closes standard output for the current processes, re-assigns
       standard  output to go to the file referenced by _p_f_d, and closes the original file
       descriptor to clean up.

           ##iinncclluuddee <<uunniissttdd..hh>>
           ......
           iinntt ppffdd;;
           ......
           cclloossee((11));;
           dduupp((ppffdd));;
           cclloossee((ppffdd));;
           ......

   RReeddiirreeccttiinngg EErrrroorr MMeessssaaggeess
       The following example redirects messages from _s_t_d_e_r_r to _s_t_d_o_u_t.

           ##iinncclluuddee <<uunniissttdd..hh>>
           ......
           dduupp22((11,, 22));;
           ......

AAPPPPLLIICCAATTIIOONN UUSSAAGGEE
       Implementations may use file descriptors that must be inherited  into  child  pro‐
       cesses  for the child process to remain conforming, such as for message catalog or
       tracing purposes. Therefore, an application that calls _d_u_p_2()  with  an  arbitrary
       integer for _f_i_l_d_e_s_2 risks non-conforming behavior, and _d_u_p_2() can only portably be
       used to overwrite file descriptor values that the application has obtained through
       explicit  actions, or for the three file descriptors corresponding to the standard
       file streams. In order to avoid a race condition of leaking an unintended file de‐
       scriptor into a child process, an application should consider opening all file de‐
       scriptors with the FD_CLOEXEC bit set unless the file descriptor is intended to be
       inherited across _e_x_e_c.

RRAATTIIOONNAALLEE
       The  _d_u_p()  function  is  redundant. Its services are also provided by the _f_c_n_t_l()
       function. It has been included in this volume of POSIX.1‐2008 primarily  for  his‐
       torical  reasons,  since many existing applications use it. On the other hand, the
       _d_u_p_2() function provides unique services, as no other interface is able to  atomi‐
       cally replace an existing file descriptor.

       The _d_u_p_2() function is not marked obsolescent because it presents a type-safe ver‐
       sion of functionality provided in a type-unsafe version by _f_c_n_t_l().  It is used in
       the POSIX Ada binding.

       The  _d_u_p_2() function is not intended for use in critical regions as a synchroniza‐
       tion mechanism.

       In the description of [[EEBBAADDFF]], the case of _f_i_l_d_e_s being out of range is covered by
       the  given case of _f_i_l_d_e_s not being valid. The descriptions for _f_i_l_d_e_s and _f_i_l_d_e_s_2
       are different because the only kind of invalidity that is relevant for _f_i_l_d_e_s_2  is
       whether  it is out of range; that is, it does not matter whether _f_i_l_d_e_s_2 refers to
       an open file when the _d_u_p_2() call is made.

FFUUTTUURREE DDIIRREECCTTIIOONNSS
       None.

SSEEEE AALLSSOO
       _c_l_o_s_e(), _f_c_n_t_l(), _o_p_e_n()

       The Base Definitions volume of POSIX.1‐2008, <<uunniissttdd..hh>>

CCOOPPYYRRIIGGHHTT
       Portions of this text are reprinted and reproduced in electronic  form  from  IEEE
       Std  1003.1, 2013 Edition, Standard for Information Technology -- Portable Operat‐
       ing System Interface (POSIX), The Open Group Base Specifications  Issue  7,  Copy‐
       right  (C)  2013 by the Institute of Electrical and Electronics Engineers, Inc and
       The Open Group.  (This is POSIX.1-2008 with the 2013 Technical Corrigendum  1  ap‐
       plied.) In the event of any discrepancy between this version and the original IEEE
       and The Open Group Standard, the original IEEE and The Open Group Standard is  the
       referee   document.   The   original   Standard   can   be   obtained   online  at
       http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to
       have been introduced during the conversion of the source files to man page format.
       To   report   such   errors,   see    https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .

IEEE/The Open Group                        2013                                   DUP(3P)
